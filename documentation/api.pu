@startuml low-level-api

class IOPin {
    #pin: uint8_t
    #pTArea: *FISH_X1_TRANSFER
    --Constructor--
    #IOPin(*FISH_X1_TRANSFER, uint8_t pin, bool)
    ----
    +getPin(): uint8_t
}

class Output {
    --Constructor--
    +Output(*FISH_X1_TRANSFER, uint8_t pin)
    ----
    +on()
    +off()
    +setLevel(uint16_t)
}

class DigitalInput {
    --Constructor--
    +DigitalInput(*FISH_X1_TRANSFER, uint8_t pin)
    ----
    +value(): bool
    +waitFor(DigitalState)
}

class Counter {
    --Constructor--
    +Counter(*FISH_X1_TRANSFER, uint8_t pin)
    ----
    +value(): bool
    +waitSteps(uint16_t)
}

class AnalogInput {
    --Constructor--
    +AnalogInput(*FISH_X1_TRANSFER, uint8_t pin)
    ----
    +value(): uint16_t
}

class NTC {
    --Constructor--
    +NTC(*FISH_X1_TRANSFER, uint8_t pin)
    ----
    +getTemperature(): double
}

class Ultrasonic {
    --Constructor--
    +Ultrasonic(*FISH_X1_TRANSFER, uint8_t pin)
    ----
    +value(): uint16_t
}

class ColorSensor {
    --Constructor--
    +ColorSensor(*FISH_X1_TRANSFER, uint8_t pin)
    ----
    +value(): uint16_t
    +color(): Color
}

class Voltage {
    --Constructor--
    +Voltage(*FISH_X1_TRANSFER, uint8_t pin)
    ----
    +value(): uint16_t
}

class TrackSensor {
    -left: uint8_t
    -right: uint8_t
    -pTArea: *FISH_X1_TRANSFER
    --Constructor--
    +Output(*FISH_X1_TRANSFER, uint8_t left, uint8_t right)
    ----
    +valueLeft(): bool
    +valueRight(): bool
    +getPinLeft(): uint8_t
    +getPinRight(): uint8_t
}

class Motor {
    --Constructor--
    +Motor(*FISH_X1_TRANSFER, uint8_t pin)
    ----
    +left(uint16_t level)
    +right(uint16_t level)
    +stop()
}

class EncoderMotor {
    --Constructor--
    +EncoderMotor(*FISH_X1_TRANSFER, uint8_t pin)
    ----
    +distanceLeft(uint16_t steps, uint16_t level)
    +distanceRight(uint16_t steps, uint16_t level)
    +synchronizeTo(EncoderMotor &other)
    +stopSynchronization()
    +waitToEnd()
    +counter(): uint16_t
    +reset()
}

class TXT {
    -pTArea: *FISH_X1_TRANSFER
    -_extension: bool
    --Constructor--
    -TXT(*FISH_X1_TRANSFER, bool extension)
    +TXT()
    ----
    +isExtension(): bool
    +getTransferArea(): *FISH_X1_TRANSFER
    +output(uint8_t pin): Output
    +motor(uint8_t pin): Motor
    +encoderMotor(uint8_t pin): EncoderMotor
    +analogInput(uint8_t pin): AnalogInput
    +ntc(uint8_t pin): NTC
    +digitalInput(uint8_t pin): DigitalInput
    +counter(uint8_t pin): Counter
    +ultrasonic(uint8_t pin): Ultrasonic
    +voltage(uint8_t pin): Voltage
    +colorSensor(uint8_t pin): ColorSensor
    +trackSensor(uint8_t left, uint8_t right): TrackSensor
    +extension(): TXT
    +playSound(uint8_t index, uint8_t repeats)
    +playSoundAndWait(uint8_t index, uint8_t repeats)
    +getTXTVoltage(): uint16_t
}

enum Color {
    BLUE
    WHITE
    RED
}

enum DigitalState {
    HIGH
    LOW
}

AnalogInput <|-- NTC
Voltage <|-- ColorSensor
Motor <|-- EncoderMotor

ColorSensor --> Color
DigitalInput --> DigitalState

Voltage -[hidden]-> AnalogInput
TrackSensor -[hidden]-> ColorSensor
Counter -[hidden]-> DigitalInput
Ultrasonic -[hidden]-> Motor
Output -[hidden]-> TXT
Counter -[hidden]> TrackSensor
@enduml

IOPin <|-- DigitalInput
IOPin <|-- Motor
IOPin <|-- Voltage
IOPin <|-- AnalogInput
IOPin <|-- Ultrasonic
IOPin <|-- Output
IOPin <|-- Counter
IOPin <|-- ColorSensor

TXT --> Output
TXT --> Motor
TXT --> EncoderMotor
TXT --> AnalogInput
TXT --> NTC
TXT --> DigitalInput
TXT --> Counter
TXT --> Ultrasonic
TXT --> Voltage
TXT --> ColorSensor
TXT --> TrackSensor

@startuml high-level-api
enum AxisState {
    UNREFERENCED
    READY
    LEFT
    RIGHT
}

enum ButtonMode {
    CLOSER
    OPENER
}

interface PosAxis {
    +getPos(): uint16_t
    +reference()
    +referenceAsync(): std::thread
    +moveAbsolut(uint16_t destination): bool
    +moveAbsolutAsync(uint16_t destination): std::thread
    +moveRelative(int16_t distance): bool
    +moveRelativeAsync(int16_t distance): std::thread
    +stop()
    +setSpeed(uint16_t speed)
    +getState(): AxisState
    +getRefButtonMode(): ButtonMode
    +setRefButtonMode(ButtonMode mode)
}

class AxisEM {
    -em: EncoderMotor
    -ref: DigitalInput
    -pos: uint16_t
    -dest: uint16_t
    -maxPos: uint16_t
    -speed: uint16_t
    -state: AxisState
    -mode: ButtonMode
    --Constructor--
    #AxisEM(TXT, uint8_t motor, uint8_t ref, ButtonMode, uint16_t max)
    ----
    -drive()
}

class AxisXS {
    -m: Motor
    -ref: DigitalInput
    -counter: DigitalInput
    -pos: uint16_t
    -dest: uint16_t
    -maxPos: uint16_t
    -speed: uint16_t
    -state: AxisState
    -mode: ButtonMode
    --Constructor--
    #AxisXS(TXT, uint8_t motor, uint8_t ref, uint8_t cnt ButtonMode, uint16_t max)
    ----
    -drive()
}

class NRefAxis {
    #m: Motor
    #speed: uint16_t
    #postitions: std::vector<std::pair<DigitalInput, ButtonMode>>
    #state: AxisState
    #lastpos: uint8_t
    --Constructor--
    #NRefAxis(TXT, uint8_t motor, uint8_t ref, std::vector<uint8_t> pos)
    ----
    +reference()
    +referenceAsync(): std::thread
    +isPos(uint8_t pos): bool
    +pos(uint8_t pos)
    +posAsync(uint8_t pos): std::thread
    +setSpeed(uint16_t speed_)
    +setButtonMode(uint8_t, ButtonMode mode)
}

class TwoRefAxis {
    --Constructor--
    #TwoRefAxis(TXT, uint8_t motor, uint8_t pos1, uint8_t pos2, ButtonMode, ButtonMode)
    ----
    +pos1()
    +pos2()
    +pos1Async(): std::thread
    +pos2Async(): std::thread
    +isPos1(): bool
    +isPos2(): bool
}

PosAxis <|-- AxisEM
PosAxis <|-- AxisXS
NRefAxis <|-- TwoRefAxis
ButtonMode <-- NRefAxis
AxisState <-- NRefAxis
AxisState <-- PosAxis
ButtonMode <-- PosAxis
@enduml
PosAxis -(0- AxisEM
PosAxis -(0- AxisXS

@startuml pos-axis-states
hide empty description
[*] --> UNREFERENCED
UNREFERENCED --> READY : Referenzpunkt erreicht

READY -left-> LEFT : Bewegung nach links
READY -right-> RIGHT : Bewegung nach rechts

LEFT -right-> READY : stop() oder Ziel erreicht
RIGHT -left-> READY : stop() oder Ziel erreicht
@enduml

@startuml two-ref-axis-states
hide empty description
[*] --> UNREFERENCED
UNREFERENCED --> READY : Referenzpunkt erreicht
UNREFERENCED --> LEFT : pos1()
UNREFERENCED --> RIGHT : pos2()

READY -left-> LEFT : pos1()
READY -right-> RIGHT : pos2()

LEFT -right-> READY : Position 1 erreicht
RIGHT -left-> READY : Position 2 erreicht
@enduml

@startuml decision-tree-color
start
if (value > 1600) then (yes)
  :Color::BLUE;
elseif (value > 1200) then (yes)
  :Color::RED;
else ()
  :Color::WHITE;
endif
stop
@enduml

@startuml warehouse-vacuumrobot

class VacuumRobot {
    -compressor: Output
    -ventil: Output
    +xaxis: AxisEM
    +yaxis: AxisEM
    +zaxis: AxisEM

    --Constructor--
    +VacuumRobot(TXT)
    ----
    +reference()
    +referenceAsync():std::thread
    +drive(uint16_t x, uint16_t y, uint16_t z);
    +suck();
    +release();
}

enum HighBayState{
    H_UNREFERENCED
    H_REFERENCING
    H_STORE_WORKPIECE
    H_PROVIDE_WORKPIECE
    H_READY
}

class HighbayWarehouse{
    -xaxis: AxisEM
    -yaxis:AxisEM
    -zaxis:TwoRefAxis    
    +state:HighBayState
    +storage:FileStorage
    --Constructor--
    +HighbayWarehouse(TXT)
    ----
    +reference()
    +referenceAsync()
    +drive(uint8_t x, uint8_t y)
    +pull(bool)
    +put(bool)
}

enum WarehouseContent{
    NO_BOX
    EMPTY_BOX
    WHITE
    RED
    BLUE
}

interface IStorage{
    getWorkpieceAt(uint8_t):WarehouseContent
    setWorkpieceAt(uint8_t, WarehouseContent)
    getPositionOf(WarehouseContent): int
    getAsJson():std::string
}

class FileStorage{
    -values WarehouseContent[]
    --Constructor--
    +FileStorage()
    ----
    +getWorkpieceAt(uint8_t):WarehouseContent
    +setWorkpieceAt(uint8_t, WarehouseContent)
    +getPositionOf(WarehouseContent):int
    +getAsJson() std::string
}

IStorage <|-- FileStorage
FileStorage <-right- HighbayWarehouse
HighBayState <-- HighbayWarehouse
WarehouseContent <-- IStorage
@enduml

@startuml highbay-statemachine
hide empty description
[*] --> H_UNREFERENCED
H_UNREFERENCED --> H_REFERENCING: reference()

H_REFERENCING --> H_READY: Referenzierung abgeschlossen

H_READY -left-> H_PROVIDE_WORKPIECE: Werkst端ck auslagern
H_READY -right-> H_STORE_WORKPIECE: Werkst端ck einlagern

H_PROVIDE_WORKPIECE --> H_READY: Werkst端ck ausgelagert

H_STORE_WORKPIECE --> H_READY: Werkst端ck eingelagert
@enduml

@startuml mqtt_client
class TxtMqttFactoryClient {
    #clientname: std::string
	#host: mqtt::string
	#port: mqtt::string
	#mqtt_user: mqtt::string
	#mqtt_pass: mqtt::binary_ref

	#cli: mqtt::async_client
	#connOpts: mqtt::connect_options

	#cb: FactoryCallback
    --Constructor--
    +TxtMqttFactoryClient(std::string clientname, std::string host, std::string mqtt_user, mqtt::binary_ref mqtt_pass, std::string port)
    ----
    +publishMessageSync(const std::string &topicFilter, const std::string &message, long timeout, int qos, bool retained): bool
    +publishMessageAsync(const std::string &topicFilter, const std::string &message, int qos, bool retained)
    +subTopicAsync(const std::string &topicFilter, void (*func)(const std::string &message), int qos, long timeout): bool
    +subTopicSync(const std::string &topicFilter, int qos, long timeout): bool
    +unsubTopic(const std::string &topicFilter, long timeout): bool
    +consume_topic(const std::string &topicFilter): std::string
}

class FactoryCallback {
    -callback_func: std::unordered_map<std::string, void (*)(const std::string &message)>
    ----
    -message_arrived(mqtt::const_message_ptr msg)
    -connected(const std::string& cause)
    -connection_lost(const std::string& cause)
    -delivery_complete(mqtt::delivery_token_ptr tok)
    +register_topic(std::string topic, void (*func)(const std::string &message))
    +remove_topic(const std::string &topic)
}

abstract class mqtt::callback {
    +message_arrived(mqtt::const_message_ptr msg)
    +connected(const std::string& cause)
    +connection_lost(const std::string& cause)
    +delivery_complete(mqtt::delivery_token_ptr tok)
}

mqtt::callback <|-- FactoryCallback

FactoryCallback <-- TxtMqttFactoryClient
@enduml
